<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>科长</title>
  
  <subtitle>你必须非常努力 才能看起来毫不费力</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cohleke.github.io/"/>
  <updated>2018-03-09T14:43:03.410Z</updated>
  <id>https://cohleke.github.io/</id>
  
  <author>
    <name>柯彰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础知识学习1</title>
    <link href="https://cohleke.github.io/2018/03/09/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A01/"/>
    <id>https://cohleke.github.io/2018/03/09/Java基础知识学习1/</id>
    <published>2018-03-09T14:40:12.000Z</published>
    <updated>2018-03-09T14:43:03.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="Java中有哪几种引用？它们的含义和区别是什么？"><a href="#Java中有哪几种引用？它们的含义和区别是什么？" class="headerlink" title="Java中有哪几种引用？它们的含义和区别是什么？"></a>Java中有哪几种引用？它们的含义和区别是什么？</h3><h3 id="请用Java实现一个线程安全且高效的单例模式。"><a href="#请用Java实现一个线程安全且高效的单例模式。" class="headerlink" title="请用Java实现一个线程安全且高效的单例模式。"></a>请用Java实现一个线程安全且高效的单例模式。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;Java中有哪几种引用？它们的含义和区别是什么？&quot;&gt;&lt;a href=&quot;#Java中有哪几种引用？它们的含义和区别是什么？&quot; cla
      
    
    </summary>
    
      <category term="Java" scheme="https://cohleke.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://cohleke.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>关于序列化的知识</title>
    <link href="https://cohleke.github.io/2018/03/08/%E5%85%B3%E4%BA%8E%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    <id>https://cohleke.github.io/2018/03/08/关于序列化的知识/</id>
    <published>2018-03-08T14:37:42.000Z</published>
    <updated>2018-03-09T14:39:50.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="Parcelable和Serializable有什么用，它们有什么差别？"><a href="#Parcelable和Serializable有什么用，它们有什么差别？" class="headerlink" title="Parcelable和Serializable有什么用，它们有什么差别？"></a>Parcelable和Serializable有什么用，它们有什么差别？</h3><h3 id="自定义一个类让其实现Parcelable，大致流程是什么"><a href="#自定义一个类让其实现Parcelable，大致流程是什么" class="headerlink" title="自定义一个类让其实现Parcelable，大致流程是什么?"></a>自定义一个类让其实现Parcelable，大致流程是什么?</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;Parcelable和Serializable有什么用，它们有什么差别？&quot;&gt;&lt;a href=&quot;#Parcelable和Serial
      
    
    </summary>
    
      <category term="Java" scheme="https://cohleke.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://cohleke.github.io/tags/Java/"/>
    
      <category term="序列化" scheme="https://cohleke.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>关于View的知识</title>
    <link href="https://cohleke.github.io/2018/03/07/%E5%85%B3%E4%BA%8EView%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    <id>https://cohleke.github.io/2018/03/07/关于View的知识/</id>
    <published>2018-03-07T14:35:18.000Z</published>
    <updated>2018-03-09T14:42:42.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="View的getWidth-和getMeasuredWidth-有什么区别吗？"><a href="#View的getWidth-和getMeasuredWidth-有什么区别吗？" class="headerlink" title="View的getWidth()和getMeasuredWidth()有什么区别吗？"></a>View的getWidth()和getMeasuredWidth()有什么区别吗？</h3><h3 id="如何在onCreate中拿到View的宽度和高度？"><a href="#如何在onCreate中拿到View的宽度和高度？" class="headerlink" title="如何在onCreate中拿到View的宽度和高度？"></a>如何在onCreate中拿到View的宽度和高度？</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;View的getWidth-和getMeasuredWidth-有什么区别吗？&quot;&gt;&lt;a href=&quot;#View的getWidth-
      
    
    </summary>
    
      <category term="Android" scheme="https://cohleke.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://cohleke.github.io/tags/Android/"/>
    
      <category term="View" scheme="https://cohleke.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>关于startActivityForResult</title>
    <link href="https://cohleke.github.io/2018/03/06/%E5%85%B3%E4%BA%8EstartActivityForResult/"/>
    <id>https://cohleke.github.io/2018/03/06/关于startActivityForResult/</id>
    <published>2018-03-06T14:29:12.000Z</published>
    <updated>2018-03-09T14:37:25.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="startActivityForResult的使用场景是什么？onActivityResult回调里面的resultCode和requestCode含义是什么？"><a href="#startActivityForResult的使用场景是什么？onActivityResult回调里面的resultCode和requestCode含义是什么？" class="headerlink" title="startActivityForResult的使用场景是什么？onActivityResult回调里面的resultCode和requestCode含义是什么？"></a>startActivityForResult的使用场景是什么？onActivityResult回调里面的resultCode和requestCode含义是什么？</h3><h3 id="Activity-A启动B的时候，在B中何时该执行setResult-？setResult可以位于Activity的finish方法之后吗？"><a href="#Activity-A启动B的时候，在B中何时该执行setResult-？setResult可以位于Activity的finish方法之后吗？" class="headerlink" title="Activity A启动B的时候，在B中何时该执行setResult ？setResult可以位于Activity的finish方法之后吗？"></a>Activity A启动B的时候，在B中何时该执行setResult ？setResult可以位于Activity的finish方法之后吗？</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;startActivityForResult的使用场景是什么？onActivityResult回调里面的resultCode和re
      
    
    </summary>
    
      <category term="Android" scheme="https://cohleke.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://cohleke.github.io/tags/Android/"/>
    
      <category term="Activity" scheme="https://cohleke.github.io/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>理解Activity的启动模式</title>
    <link href="https://cohleke.github.io/2018/03/05/%E7%90%86%E8%A7%A3Activity%E7%9A%84%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://cohleke.github.io/2018/03/05/理解Activity的启动模式/</id>
    <published>2018-03-05T14:25:32.000Z</published>
    <updated>2018-03-09T14:37:22.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="Activity的启动模式有哪几种，分别用于什么场景？"><a href="#Activity的启动模式有哪几种，分别用于什么场景？" class="headerlink" title="Activity的启动模式有哪几种，分别用于什么场景？"></a>Activity的启动模式有哪几种，分别用于什么场景？</h3><h3 id="清晰地描述下onNewIntent和onConfigurationChanged这两个生命周期方法的场景？"><a href="#清晰地描述下onNewIntent和onConfigurationChanged这两个生命周期方法的场景？" class="headerlink" title="清晰地描述下onNewIntent和onConfigurationChanged这两个生命周期方法的场景？"></a>清晰地描述下onNewIntent和onConfigurationChanged这两个生命周期方法的场景？</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;Activity的启动模式有哪几种，分别用于什么场景？&quot;&gt;&lt;a href=&quot;#Activity的启动模式有哪几种，分别用于什么场景
      
    
    </summary>
    
      <category term="Android" scheme="https://cohleke.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://cohleke.github.io/tags/Android/"/>
    
      <category term="Activity" scheme="https://cohleke.github.io/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>清晰地理解Service</title>
    <link href="https://cohleke.github.io/2018/03/04/%E6%B8%85%E6%99%B0%E5%9C%B0%E7%90%86%E8%A7%A3Service/"/>
    <id>https://cohleke.github.io/2018/03/04/清晰地理解Service/</id>
    <published>2018-03-04T14:23:45.000Z</published>
    <updated>2018-03-09T14:37:18.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="Service的start和bind状态有什么区别？"><a href="#Service的start和bind状态有什么区别？" class="headerlink" title="Service的start和bind状态有什么区别？"></a>Service的start和bind状态有什么区别？</h3><h3 id="同一个Service，先startService，然后再bindService，如何把它停止掉？"><a href="#同一个Service，先startService，然后再bindService，如何把它停止掉？" class="headerlink" title="同一个Service，先startService，然后再bindService，如何把它停止掉？"></a>同一个Service，先startService，然后再bindService，如何把它停止掉？</h3><h3 id="你有注意到Service的onStartCommand方法的返回值吗？不同返回值有什么区别？"><a href="#你有注意到Service的onStartCommand方法的返回值吗？不同返回值有什么区别？" class="headerlink" title="你有注意到Service的onStartCommand方法的返回值吗？不同返回值有什么区别？"></a>你有注意到Service的onStartCommand方法的返回值吗？不同返回值有什么区别？</h3><h3 id="Service的生命周期方法onCreate、onStart、onBind等运行在哪个线程？"><a href="#Service的生命周期方法onCreate、onStart、onBind等运行在哪个线程？" class="headerlink" title="Service的生命周期方法onCreate、onStart、onBind等运行在哪个线程？"></a>Service的生命周期方法onCreate、onStart、onBind等运行在哪个线程？</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;Service的start和bind状态有什么区别？&quot;&gt;&lt;a href=&quot;#Service的start和bind状态有什么区别？&quot;
      
    
    </summary>
    
      <category term="Android" scheme="https://cohleke.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://cohleke.github.io/tags/Android/"/>
    
      <category term="Service" scheme="https://cohleke.github.io/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>理解Java中的Synchronized关键字</title>
    <link href="https://cohleke.github.io/2018/03/03/%E7%90%86%E8%A7%A3Java%E4%B8%AD%E7%9A%84synchronized%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://cohleke.github.io/2018/03/03/理解Java中的synchronized关键字/</id>
    <published>2018-03-03T14:16:12.000Z</published>
    <updated>2018-03-09T14:51:07.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="理解synchronized的含义、明确synchronized关键字修饰普通方法、静态方法和代码块时锁对象的差异。"><a href="#理解synchronized的含义、明确synchronized关键字修饰普通方法、静态方法和代码块时锁对象的差异。" class="headerlink" title="理解synchronized的含义、明确synchronized关键字修饰普通方法、静态方法和代码块时锁对象的差异。"></a>理解synchronized的含义、明确synchronized关键字修饰普通方法、静态方法和代码块时锁对象的差异。</h3><p>有如下一个类A<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后创建两个对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A a1 = <span class="keyword">new</span> A();</span><br><span class="line">A a2 = <span class="keyword">new</span> A();</span><br></pre></td></tr></table></figure></p><p>然后在两个线程中并发访问如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread1                       Thread2</span><br><span class="line">a1.a();                       a2.a();</span><br></pre></td></tr></table></figure></p><p>请问二者能否构成线程同步？</p><p>如果A的定义是下面这种呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h2><p>Java多线程中的同步机制会对资源进行加锁，保证在同一时间只有一个线程可以操作对应资源，避免多程同时访问相同资源发生冲突。Synchronized是Java中的关键字，它是一种同步锁，可以实现同步机制。</p><p>Synchronized主修修饰对象为以下三种：</p><ul><li><p>修饰普通方法 一个对象中的加锁方法只允许一个线程访问。但要注意这种情况下锁的是访问该方法的实例对象， 如果多个线程不同对象访问该方法，则无法保证同步。</p></li><li><p>修饰静态方法 由于静态方法是类方法， 所以这种情况下锁的是包含这个方法的类，也就是类对象；这样如果多个线程不同对象访问该静态方法，也是可以保证同步的。</p></li><li><p>修饰代码块 其中普通代码块 如Synchronized（obj） 这里的obj 可以为类中的一个属性、也可以是当前的对象，它的同步效果和修饰普通方法一样；Synchronized方法 （obj.class）静态代码块它的同步效果和修饰静态方法类似。</p></li></ul><p>Synchronized方法控制范围较大， 它会同步对象中所有Synchronized方法的代码。</p><p>Synchronized代码块控制范围较小， 它只会同步代码块中的代码， 而位于代码块之外的代码是可以被多个线程访问的。</p><p>简单来说 就是 Synchronized代码块更加灵活精确。</p><p>问题1 ：不能同步<br>问题2：能同步</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;理解synchronized的含义、明确synchronized关键字修饰普通方法、静态方法和代码块时锁对象的差异。&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Java" scheme="https://cohleke.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://cohleke.github.io/tags/Java/"/>
    
      <category term="Synchronized" scheme="https://cohleke.github.io/tags/Synchronized/"/>
    
  </entry>
  
  <entry>
    <title>webviewclient WebChromeClient</title>
    <link href="https://cohleke.github.io/2018/03/02/WebChromeClient/"/>
    <id>https://cohleke.github.io/2018/03/02/WebChromeClient/</id>
    <published>2018-03-02T02:34:18.000Z</published>
    <updated>2018-03-09T14:42:55.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebViewClient"><a href="#WebViewClient" class="headerlink" title="WebViewClient"></a>WebViewClient</h2><h3 id="WebViewClient中的常用方法有"><a href="#WebViewClient中的常用方法有" class="headerlink" title="WebViewClient中的常用方法有"></a>WebViewClient中的常用方法有</h3><ul><li>onPageFinished(WebView view, String url)</li><li>onPageStarted(WebView view, String url, Bitmap favicon)</li><li>onReceivedSslError(WebView view, SslErrorHandler handler, SslError error)</li><li>shouldInterceptRequest(WebView view, String url)</li><li>shouldOverrideUrlLoading(WebView view, String url)</li></ul><p>等,以上方法都是webview中请求过程等事件的处理方法.</p><h2 id="WebChromeClient"><a href="#WebChromeClient" class="headerlink" title="WebChromeClient"></a>WebChromeClient</h2><h3 id="WebChromeClient中的常用方法有"><a href="#WebChromeClient中的常用方法有" class="headerlink" title="WebChromeClient中的常用方法有"></a>WebChromeClient中的常用方法有</h3><ul><li>onCloseWindow(WebView window)</li><li>onConsoleMessage(ConsoleMessage consoleMessage)</li><li>onJsAlert(WebView view, String url, String message, JsResult result)</li><li>onJsConfirm(WebView view, String url, String message, JsResult result)</li><li>onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result)</li><li>onPermissionRequest(PermissionRequest request)</li><li>onReceivedIcon(WebView view, Bitmap icon)</li><li>onReceivedTitle(WebView view, String title)</li><li>onShowFileChooser(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)</li></ul><p>等,以上方法都是webview和用户之间有交互的一些方法,如JS弹窗,文件选择弹窗,窗口关闭等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebViewClient&quot;&gt;&lt;a href=&quot;#WebViewClient&quot; class=&quot;headerlink&quot; title=&quot;WebViewClient&quot;&gt;&lt;/a&gt;WebViewClient&lt;/h2&gt;&lt;h3 id=&quot;WebViewClient中的常用方法有&quot;
      
    
    </summary>
    
      <category term="Android" scheme="https://cohleke.github.io/categories/Android/"/>
    
    
      <category term="webview" scheme="https://cohleke.github.io/tags/webview/"/>
    
      <category term="Android" scheme="https://cohleke.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
